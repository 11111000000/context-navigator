* Emacs Context Navigator

Context Navigator is a lightweight, project-aware context manager and sidebar
for Emacs. It helps you practice “context engineering” for humans: instead of
keeping task state, files, selections and notes in your head, you externalize
context into clear, reusable groups tied to your projects. That reduces mental
load and frees energy for deep, creative work.

#+caption: Context Navigator
[[./context-navigator-items.png]]

Unlike ad-hoc “open a few buffers and hope you remember why,” Navigator invites
you to work with deliberate context units:
- you define groups such as “research,” “bug-123,” “refactor-X,” “release-notes”
- you collect files, selections, and buffers into those groups
- you can suspend/resume a group later or switch tasks instantly
- Navigator persists this safely (per-project or globally) and can auto-load on project switch

#+caption: Context Navigator Groups
[[./context-navigator-groups.png]]  

Navigator is also very useful together with gptel: it can push enabled items
(one-way) into gptel so your chat sessions are always grounded in the right
context, and you can return to your “saved” context groups at any time.

Status: 1.0.0 — usable, test-backed core with evolving UI. See “Roadmap”.

** Requirements
- Emacs 29.1+ (recommended 30.1+)
- gptel 0.8.0+ (recommended) — Navigator degrades gracefully if gptel is absent
- Optional: project.el or projectile for project detection
- Optional: all-the-icons for a beautiful sidebar

** Installation
You can use Context Navigator locally while developing, or wire it with use-package.

*** Local checkout + use-package
#+begin_src emacs-lisp
;; Adjust to your local path
(add-to-list 'load-path "/home/az/Code/context-navigator")

(use-package context-navigator
  :commands
  (context-navigator-start
   context-navigator-mode
   context-navigator-sidebar-open
   context-navigator-refresh
   context-navigator-context-load
   context-navigator-context-save
   context-navigator-context-unload)
  :init
  ;; Recommended session defaults
  (setq context-navigator-autoload t   ;; auto-load context on project switch
        context-navigator-autosave t)  ;; autosave after model refresh
  :config
  ;; Enable the global mode and open the sidebar on demand
  (context-navigator-mode 1))
#+end_src

To open the sidebar immediately:
#+begin_src emacs-lisp
(context-navigator-start)
#+end_src

Notes:
- The umbrella entry “context-navigator.el” provides autoload stubs, so :commands works fine.
- If Emacs can’t find the package, ensure load-path points to the repo root before the use-package form.

*** straight.el (local or fork)
#+begin_src emacs-lisp
(use-package context-navigator
  :straight (context-navigator
             :type git
             :host github
             :repo "your-user/context-navigator")
  :init (setq context-navigator-autoload t
              context-navigator-autosave t)
  :config (context-navigator-mode 1))
#+end_src

** Configuration

Below are two opinionated presets: “beautiful” (icons, compact controls, tri-state indicators)
and “minimalist” (pure, low-noise manager). Mix and match to taste.

*** Beautiful preset (icons, compact controls, tri-state indicators)
Requires all-the-icons (and installed fonts). Indicators compare Navigator vs gptel:
- green ● item enabled and present in gptel
- gray  ○ item disabled and absent in gptel
- yellow ● mismatch (present when disabled, or absent when enabled)

#+begin_src emacs-lisp
;; Install all-the-icons and run M-x all-the-icons-install-fonts once.
(use-package all-the-icons :defer t)

(use-package context-navigator
  :init
  ;; Session behavior
  (setq context-navigator-autoload t
        context-navigator-autosave t
        ;; Optional: start with auto-project switching and push OFF by default.
        context-navigator-default-auto-project-switch t
        context-navigator-default-push-to-gptel nil)

  ;; Sidebar look and feel
  (setq context-navigator-sidebar-width 40
        context-navigator-language 'en
        ;; Render columns: show full path on the right; truncate names if needed
        context-navigator-render-show-path nil
        context-navigator-render-truncate-name 64
        ;; Indicator style (auto uses icons when available, else text bullets)
        context-navigator-render-indicator-style 'auto
        ;; Sidebar footer controls style: compact icon-like labels
        context-navigator-controls-style 'icons

        ;; Icons settings
        context-navigator-enable-icons t
        context-navigator-icons-disable-on-remote t

        ;; Async/persist tuning
        context-navigator-context-switch-interval 0.7
        context-navigator-context-load-batch-size 64)

  :config
  (context-navigator-mode 1))
#+end_src

*** Minimalist preset (no icons, minimal UI, manager-first)
Keeps Navigator as a quiet, robust context manager. gptel push stays OFF by default.

#+begin_src emacs-lisp
(use-package context-navigator
  :init
  (setq context-navigator-autoload t
        context-navigator-autosave t
        context-navigator-default-auto-project-switch t
        context-navigator-default-push-to-gptel nil

        ;; Minimal visuals
        context-navigator-render-show-path nil
        context-navigator-render-indicator-style 'text
        context-navigator-controls-style 'text
        context-navigator-enable-icons nil

        ;; Narrower sidebar
        context-navigator-sidebar-width 33)
  :config
  (context-navigator-mode 1))
#+end_src

** Quick start
- Enable the mode and open the sidebar:
  - M-x context-navigator-start
  - or M-x context-navigator-mode, then M-x context-navigator-sidebar-open
- Work with your files, buffers and selections. By default, Navigator does not modify gptel.
  - Toggle [→gptel: on] in the sidebar footer to push (one-way) whenever your model changes.
  - Use footer buttons [Push now] (when auto-push is off) and [Clear gptel] to manage gptel manually.

** Key bindings

Global (context-navigator-mode):
- C-c n  Open transient menu
  Within transient: n sidebar; p switch to current project; a add (universal);
  g groups; s save; l load; u unload; x push→gptel; T auto-project; P push now; C clear gptel
- M-x context-navigator-switch-to-current-buffer-project  Manually switch to current buffer’s project

Sidebar (context-navigator-sidebar-mode):
- RET   Visit item (items mode) / Open group (groups mode)
- SPC   Preview in other window (non-disruptive)
- t     Toggle enabled/disabled (updates model; applies to gptel only when push is ON)
- d     Delete item (items mode) / Delete group (groups mode)
- g     Refresh items (items mode) / Refresh groups (groups mode)
- h     Toggle items <-> groups (in items shows groups; in groups goes back)
- a     Create group (groups mode)
- r     Rename group (groups mode)
- c     Duplicate group (groups mode)
- x     Toggle push → gptel (footer toggle)
- T     Toggle auto-project switching (footer toggle)
- P     Push now (when auto-push is off)
- C     Clear gptel
- TAB / S-TAB  Jump between interactive elements (items, groups, toggles, actions)
- q     Quit sidebar
- ?     Help

** Workflows

Context-first tasking (examples you can replicate immediately):

- Project-centric groups
  - research: notes, links, snippets, design docs
  - bug-123: failing test files, logs, minimal reproducer selections
  - refactor-X: target files, selections with function boundaries
  - release-notes: changelog fragments and buffers
  Switch groups with one command; Navigator persists per-project so you can resume.

- Multi-project navigation with auto-switch
  Turn auto-project switching ON. When you move focus between buffers in different projects,
  Navigator loads that project’s current group automatically (or global context when no project).

- Task tracking via groups (e.g. external tracker)
  Mirror tickets as groups: “jira-ABC-42,” “jira-ABC-43.” Add relevant files/selections to each.
  Return to exactly the right context even after days away.

- Selections and buffers for focused LLM sessions
  When you don’t want to add whole files, add regions (“selections”) or ephemeral buffers. These
  are perfect for dialog-driven iteration. Use the transient “Add (universal)”:
  - active region in any buffer → selection item
  - file-backed buffer with no region → file item
  - no file and no region → buffer item
  - Dired with marked files/dirs → recursive file gatherer with preview/confirm
    (skips non-regular files; warns on TRAMP; enforces size threshold)

- Manual vs auto push to gptel
  Keep push OFF for exploratory work; manually [Push now] when ready.
  Turn push ON to treat your group as the single source of truth for gptel context.
  [Clear gptel] resets chat context without touching the model.

Tips:
- Use short, stable group slugs (Navigator generates them automatically).
- Commit your .context directory if team-wide context sharing makes sense for your workflow.

** Features
- Push to gptel (one-way)
  - Navigator never imports from gptel
  - With push ON: model changes and group switches reset gptel and add enabled items
  - With push OFF: gptel is untouched; use [Push now]/[Clear gptel] for manual control
  - Tri-state indicators (when icons enabled): green/gray/yellow reflect Navigator vs gptel

- Sidebar UI
  - Left side window with configurable width
  - Header shows project name and active group slug, or “Global context” in global mode
  - Footer toggles: [→gptel: on/off], [auto-proj: on/off]; actions [Push now], [Clear gptel]
  - Optional icons via all-the-icons (auto-disabled on TRAMP if configured)
  - TAB navigation between items, groups, toggles and actions
  - Preserves scroll and point best-effort on refresh

- Universal Add (transient: C-c n a)
  - Dired: recursive gather for directories with preview + confirmation; skips non-regular files
  - File size guard (default 2MB) with readable summary
  - TRAMP-aware: warns before adding remote files
  - Active region → selection; file buffer with no region → file; otherwise → buffer

- Persistence (v3 format, per-group files)
  - Project groups: ROOT/.context/<group>.el
  - Global groups: ~/.context/<group>.el
  - State file: ROOT/.context/state.el (or ~/.context/state.el) with (:version 1 :current "group-slug")
  - Safe s-exp read (no eval), with migrations and validation
  - Async load per-group with batching and progress notifications

- Project auto-load/save
  - Hooks detect project changes (buffer/window selection), throttle interval configurable
  - Auto-loads context; when absent, can clear to global
  - Auto-save after model refresh (configurable)

** Configuration reference (defcustom)

Core:
- context-navigator-auto-refresh (t)
- context-navigator-autosave (t)
- context-navigator-autoload (t)
- context-navigator-sidebar-width (32–40 typical)
- context-navigator-max-filename-length (64)
- context-navigator-context-switch-interval (0.7)
- context-navigator-context-load-batch-size (64)
- context-navigator-dir-name (".context")
- context-navigator-context-file-name ("context.el")
- context-navigator-global-dir ("~/.context")
- context-navigator-debug (nil)
- context-navigator-default-push-to-gptel (nil)
- context-navigator-default-auto-project-switch (nil)

Render:
- context-navigator-render-show-path (nil|t)
- context-navigator-render-truncate-name (64)
- context-navigator-render-indicator-style (auto|icons|text|off)

Icons:
- context-navigator-enable-icons (t)
- context-navigator-icons-disable-on-remote (t)

Sidebar controls:
- context-navigator-controls-style (auto|icons|text)

Universal add:
- context-navigator-max-file-size (2MB default)

Example tweaks:
#+begin_src emacs-lisp
(setq context-navigator-sidebar-width 40
      context-navigator-render-show-path t
      context-navigator-enable-icons t
      context-navigator-icons-disable-on-remote t
      context-navigator-context-switch-interval 0.7
      context-navigator-context-load-batch-size 64)
#+end_src

** Persistence and async loading
- Save explicitly:
  - M-x context-navigator-context-save
- Load explicitly:
  - M-x context-navigator-context-load
- Unload (switch to global / clear):
  - M-x context-navigator-context-unload

During async load:
- Progress events: :context-load-start / :context-load-step / :context-load-done
- UI shows a loading status in the header; autosave/refresh are temporarily inhibited and fired once after completion

** Troubleshooting
- “M-x context-navigator-mode” not found
  - Ensure the repo root is added to load-path before loading:
    #+begin_src emacs-lisp
    (add-to-list 'load-path "/home/az/Code/context-navigator")
    #+end_src
  - Or refer to the use-package :load-path setup above.

- No gptel buffer found
  - Navigator still renders and persists the model; applying to gptel requires gptel installed and a chat buffer.

- Icons don’t show
  - Ensure all-the-icons is installed and context-navigator-enable-icons is non-nil.
  - Icons are disabled automatically for remote paths if context-navigator-icons-disable-on-remote is non-nil.

- Universal Add preview and size limits
  - Adding directories prompts a preview/confirmation and warns on TRAMP remotes.
  - Files over context-navigator-max-file-size are skipped (default 2MB). Adjust if needed.

- Sidebar flicker
  - Rendering is debounced and tries to preserve scroll/point. For very large contexts, prefer async load and avoid heavy operations in the sidebar.

** Localization (i18n)
- Languages: English (en), Russian (ru), French (fr), German (de), Spanish (es)
- Auto-selected from system locale by default
- Customize via: context-navigator-language (auto|en|ru|fr|de|es)

** Screenshots/GIFs (planned)
Suggested scenes to showcase:
- Items view with icons, tri-state indicators, and paths; toggles in footer; TAB navigation
- Groups view with active group highlight and CRUD actions
- Universal Add preview for a mixed Dired selection (dirs + files), with TRAMP warning
- Auto-project switching across multiple projects; showing the header changing
- Push ON vs OFF behavior, and “Clear gptel”

** Development
Run all tests:
#+begin_src sh
emacs -Q -batch -l test/run-tests.el -f ert-run-tests-batch-and-exit
#+end_src

Project layout (modules):
- context-navigator.el (umbrella entry, autoloads)
- context-navigator-core.el (state, commands, wiring)
- context-navigator-events.el (event bus, debounce)
- context-navigator-fp.el (functional helpers)
- context-navigator-model.el (pure model, diff, keys)
- context-navigator-persist.el (v3 persistence, async load)
- context-navigator-gptel-bridge.el (gptel adapter)
- context-navigator-project.el (project detection, throttled switches)
- context-navigator-render.el (pure render helpers)
- context-navigator-icons.el (optional icon provider)
- context-navigator-sidebar.el (sidebar UI)
- context-navigator-transient.el (transient menu, universal add)

** Roadmap
Delivered recently:
- Groups view with create/rename/delete/duplicate
- Item toggle (enabled/disabled) and delete; apply to gptel when push is ON
- Tri-state indicators and TAB navigation between interactive elements
- Per-group v3 persistence and async load; auto-init default group
- Universal Add with preview, size guard, TRAMP awareness

Upcoming:
- Patch/diff rendering in sidebar (stable expand state)
- Robust selection tracking (markers/anchors)
- Transient menu enhancements: bulk operations, search/filter
- CI matrix for Emacs versions
- Smart context generation:
  - from project search results or grep/ripgrep queries
  - from LSP symbols/references/workspace folders
  - via AI-assisted suggestions (derive a candidate group from current task)

** License
MIT. See LICENSE.

** Acknowledgements
- gptel for the AI interface
- Emacs community for project.el, all-the-icons, and inspiration
