* Emacs Context Navigator

Context Navigator is a lightweight, project-aware context manager and sidebar
for Emacs. It helps you practice “context engineering”: instead of keeping your
task state, files, selections and notes in your head, you externalize context
into clear, reusable groups tied to your projects. That reduces mental load and
frees energy for deep, creative work.

#+caption: Context Navigator
[[./context-navigator-items.png]]

Instead of the usual “open a few buffers, hope you remember why”, Navigator lets
you define explicit context groups:
- “research”, “bug-123”, “release-notes”, anything you want
- add files, buffers, or regions/selections to a group
- suspend/resume groups, or instantly switch context
- Navigator persists state per-project (or globally) and supports auto-loading on project switch

#+caption: Context Navigator Groups
[[./context-navigator-groups.png]]

Navigator works great with [gptel](https://github.com/karthink/gptel): it can push enabled items (one-way)
into gptel, so your chat sessions are always grounded in context, yet you can return to your saved groups anytime.

Status: 1.0.0 — test-backed core, evolving UI. See “Roadmap”.

** Requirements
- Emacs 29.1+ (recommended 30.1+)
- [transient](https://github.com/magit/transient) 0.3.0+ (required for menu)
- [gptel](https://github.com/karthink/gptel) 0.8.0+ (optional)
- Optional: project.el or projectile (for project detection)
- Optional: [all-the-icons](https://github.com/domtronn/all-the-icons.el) (for sidebar icons)

** Installation

Not on MELPA yet. Use straight.el/git or local checkout.

*** Local checkout + use-package (recommended)
#+begin_src emacs-lisp
(add-to-list 'load-path "/path/to/context-navigator")

(use-package context-navigator
  :commands (context-navigator-start context-navigator-mode context-navigator-sidebar-open)
  :init
  (setq context-navigator-autoload t
        context-navigator-autosave t
        context-navigator-global-key "C-c n") ;; recommended global key
  :config
  (context-navigator-mode 1))
#+end_src

*** Installation via straight.el (from GitHub)
#+begin_src emacs-lisp
(use-package context-navigator
  :straight (context-navigator
             :type git
             :host github
             :repo "11111000000/context-navigator")
  :init
  (setq context-navigator-autoload t
        context-navigator-autosave t
        context-navigator-global-key "C-c n")
  :config
  (context-navigator-mode 1))
#+end_src

*** Notes
- If you don’t want a global binding, leave `context-navigator-global-key` as `nil` (the default).
- To invoke the menu without a keybinding, use `M-x context-navigator-transient`.

** Quick Start
- Enable mode: `M-x context-navigator-mode` or `(context-navigator-mode 1)`
- Press `C-c n` (if you set it), then `n` to open the sidebar
- Or: `M-x context-navigator-transient` then `n`
- Or: `M-x context-navigator-start` opens the sidebar

Work with your files, buffers, and selections. By default, Navigator does **not** affect gptel.
Toggle [→gptel: on] in the sidebar footer to push (one-way) when your model changes.
Use [Push now] and [Clear gptel] for manual control.

** Key bindings

_Global (context-navigator-mode):_
- `C-c n`   Open transient menu (`context-navigator-transient`)  
  - In menu: `n` sidebar; `a` add; `g` groups; `s` save; `l` load; `u` unload; `x` push→gptel; `T` auto-project; `P` push now; `C` clear gptel
- `M-x context-navigator-switch-to-current-buffer-project`  Force project switch

_Sidebar (context-navigator-sidebar-mode):_
- `RET`/`SPC`  Visit/preview item or group
- `t`      Toggle enabled/disabled
- `d`      Delete item/group
- `g`      Refresh
- `h`      Toggle items/groups
- `a`      Add group
- `r`      Rename group
- `c`      Duplicate group
- `x`      Toggle push→gptel
- `T`      Toggle auto-project
- `P`      Push now
- `C`      Clear gptel
- `TAB`/`S-TAB`  Jump between elements
- `q`      Quit sidebar
- `?`      Help

** Recommended Configuration
- Use the `context-navigator-global-key` variable to set your preferred global key.  
  Example:  
  #+begin_src emacs-lisp
  (setq context-navigator-global-key "C-c n")
  #+end_src

- If you use another package that binds `C-c n`, change it to another binding of your choice (e.g. `C-c C-n`).

** Typical Workflows

- _Project-centric groups_: Research, bug fixes, refactoring; switches context in one command.
- _Auto-project switching_: When enabled, follows you across projects.
- _Task tracking_: Mirror tickets as groups, toggle enabled files.
- _LLM sessions_: Add buffer regions, whole buffers, or Dired marked files/dirs (see “Add (universal)” in menu).
- _Manual vs auto gptel update_: Use footer toggles/push-now for one-way control.

** Features

- **Groups and Items**
  - Context groups per project (or globally)
  - Add files, buffers, regions/selections
  - Enable/disable items per group
- **Sidebar UI**
  - Optional icons (all-the-icons)
  - Mouse/TAB navigation friendly
  - Footer: push toggle, auto-project toggle, manual push/clear
- **GPTel integration**
  - One-way “push” (never imports from gptel)
  - On push: reset gptel and add all enabled items
- **Persistence**
  - Per-project and global: never leaks data outside project
  - Async load/save, batching, auto-load on project change
- **Universal Add**
  - Dired: recursive, with preview/confirmation, skips non-regular and big files
  - File/region/buffer: auto-detected via context

** Configuration reference (defcustom)
- context-navigator-autoload (t)
- context-navigator-autosave (t)
- context-navigator-sidebar-width (integer)
- context-navigator-global-key (nil by default; example: "C-c n")
- ... [See code for full list; the variable docstrings are clear.]

** Troubleshooting

- *No menu or keys?*  
  Check that `context-navigator-mode` is enabled, and that you set `context-navigator-global-key` if you want a global key.
- *Wrong key?*  
  Change `context-navigator-global-key` to your preferred binding.
- *Sidebar not showing?*  
  Try `M-x context-navigator-start`.
- *Icons not showing?*  
  Install `all-the-icons` and run `M-x all-the-icons-install-fonts`.
- *Still lost?*  
  Use `?` in the sidebar for help.

** License
MIT — see LICENSE.

** Acknowledgements
- gptel for the AI interface
- Emacs community for project.el, all-the-icons, and inspiration
